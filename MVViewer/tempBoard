
GLvoid glmCreateArrays(GLMmodel* model, GLuint mode)
{
GLMgroup* group;
GLMtriangle* triangle;
GLMarray *array = NULL, *arrayTail;
GLMnode2 *node, **members, *tail;
GLfloat *vertices, *normals, *texcoords;
GLushort *indices;
GLushort indexCount, vntCount;
int i, j;

assert(model);
assert(model->vertices);

if (model->arrays) glmDeleteArrays(model);

/* do a bit of warning */
if (mode & GLM_FLAT && !model->facetnorms) {
EDEN_LOGe("glmCreateArrays() warning: flat render mode requested "
"with no facet normals defined.\n");
mode &= ~GLM_FLAT;
}
if (mode & GLM_SMOOTH && !model->normals) {
EDEN_LOGe("glmCreateArrays() warning: smooth render mode requested "
"with no normals defined.\n");
mode &= ~GLM_SMOOTH;
}
if (mode & GLM_TEXTURE && !model->texcoords) {
EDEN_LOGe("glmCreateArrays() warning: texture render mode requested "
"with no texture coordinates defined.\n");
mode &= ~GLM_TEXTURE;
}
if (mode & GLM_COLOR && !model->materials) {
EDEN_LOGe("glmCreateArrays() warning: color render mode requested "
"with no materials defined.\n");
mode &= ~GLM_COLOR;
}
if (mode & GLM_MATERIAL && !model->materials) {
EDEN_LOGe("glmCreateArrays() warning: material render mode requested "
"with no materials defined.\n");
mode &= ~GLM_MATERIAL;
}
if (mode & GLM_COLOR && mode & GLM_MATERIAL) {
EDEN_LOGe("glmCreateArrays() warning: color and material render mode requested "
"using only material mode.\n");
mode &= ~GLM_COLOR;
}

group = model->groups;
int counter = 0;
while (group) {
counter ++;
if (group->numtriangles) {

int needNormals;
int needFacetnorms;
int needTexcoords;

arrayTail = array;
array = (GLMarray *)calloc(1, sizeof(GLMarray)); // implicit array->next = NULL;
if (!arrayTail) {
model->arrays = array;
model->arrayMode = mode;
} else arrayTail->next = array;

// For every point in every triangle in the group, look to see if another point in another
// triangle in the group already has the exact same vertex, normal and texcooord.
// If it does, stash the index for that data in our list of indices.
// If not, then copy the vertex, normal and texcoord from the model, stash the index
// AND record that this data exists by adding to the existing per-vertex
// linked-list (the members array) of GLMnodes.

// Allocate a structure that will hold a linked list of triangle
// indices for each vertex.
members = (GLMnode2**)calloc(model->numvertices + 1, sizeof(GLMnode2 *)); // + 1 because indices in model are 1-based.

needNormals = mode & GLM_SMOOTH;
needFacetnorms = mode & GLM_FLAT;
needTexcoords = mode & GLM_TEXTURE;

// Allocate arrays to hold the new vertex, normal and texcoord data.
// The arrays will be the maximum theoretical size, and we will shrink them at the end.
vertices = (GLfloat *)malloc(sizeof(GLfloat) * 3 * group->numtriangles * 3); // 3 floats per vertex, 3 vertices per triangle.
if (needNormals || needFacetnorms) normals = (GLfloat *)malloc(sizeof(GLfloat) * 3 * group->numtriangles * 3); // 3 floats per normal, 3 normals per triangle.
else normals = NULL;
if (needTexcoords) texcoords = (GLfloat *)malloc(sizeof(GLfloat) * 2 * group->numtriangles * 3); // 2 floats per texcoord, 3 texcoords per triangle.
else texcoords = NULL;
vntCount = 0;

indices = (GLushort *)malloc(sizeof(GLushort) * group->numtriangles * 3); // 1 index per v/n/t, 3 v/n/ts per triangle.
indexCount = 0;
for (i = 0; i < glmMin(group->numtriangles, (USHRT_MAX + 1) / 3); i++) {
//            for (i = 0; i < group->numtriangles; i++) { // We are using GLushorts for indices, so limit to USHRT_MAX / 3 triangles per group.
triangle = &(T(group->triangles[i]));
for (j = 0; j < 3; j++) {
// We are now examining the linked list for vertex with index (1-based) T(i).vindices[j].
node = members[triangle->vindices[j]]; // Get current head of linked-list.
while (node) {
if (!needNormals || ((model->normals[triangle->nindices[j] * 3    ] == normals[node->index * 3    ]) &&
(model->normals[triangle->nindices[j] * 3 + 1] == normals[node->index * 3 + 1]) &&
(model->normals[triangle->nindices[j] * 3 + 2] == normals[node->index * 3 + 2]))) {
if (!needFacetnorms || ((model->facetnorms[triangle->findex * 3    ] == normals[node->index * 3    ]) &&
(model->facetnorms[triangle->findex * 3 + 1] == normals[node->index * 3 + 1]) &&
(model->facetnorms[triangle->findex * 3 + 2] == normals[node->index * 3 + 2]))) {
if (!needTexcoords || ((model->texcoords[triangle->tindices[j] * 2    ] == texcoords[node->index * 2    ]) &&
(model->texcoords[triangle->tindices[j] * 2 + 1] == texcoords[node->index * 2 + 1]))) {
break; // The data for "node" is a match, so reuse its index.
}
}
}
node = node->next;
}
if (!node) {
// No re-usable set of data (vertex, texcoord, normal) was found, make a new one.
// First make a node to point to it.
node = (GLMnode2 *)malloc(sizeof(GLMnode2));
node->index = vntCount;
node->next = members[triangle->vindices[j]];     // Link to the current head of the list
members[triangle->vindices[j]] = node;			// and make this node the new head.
// Now copy the data; (vx, vy, vz), (nx, ny, nz), (tu, tv).
vertices[vntCount * 3    ] = model->vertices[triangle->vindices[j] * 3    ];
vertices[vntCount * 3 + 1] = model->vertices[triangle->vindices[j] * 3 + 1];
vertices[vntCount * 3 + 2] = model->vertices[triangle->vindices[j] * 3 + 2];
if (needNormals) {
normals[vntCount * 3    ] = model->normals[triangle->nindices[j] * 3    ];
normals[vntCount * 3 + 1] = model->normals[triangle->nindices[j] * 3 + 1];
normals[vntCount * 3 + 2] = model->normals[triangle->nindices[j] * 3 + 2];
} else if (needFacetnorms) {
normals[vntCount * 3    ] = model->facetnorms[triangle->findex * 3    ];
normals[vntCount * 3 + 1] = model->facetnorms[triangle->findex * 3 + 1];
normals[vntCount * 3 + 2] = model->facetnorms[triangle->findex * 3 + 2];
}
if (needTexcoords) {
texcoords[vntCount * 2    ] = model->texcoords[triangle->tindices[j] * 2    ];
texcoords[vntCount * 2 + 1] = model->texcoords[triangle->tindices[j] * 2 + 1];
}
indices[indexCount++] = vntCount++;
} else {
indices[indexCount++] = node->index;
}
} // for j
} // for i

// Compress the v/n/t arrays by creating new allocation and copying the data.
array->vertices = (GLfloat *)malloc(sizeof(GLfloat) * 3 * vntCount);
for (i = 0; i < 3 * vntCount; i++) array->vertices[i] = vertices[i];
free (vertices);
if (needNormals) {
array->normals = (GLfloat *)malloc(sizeof(GLfloat) * 3 * vntCount);
for (i = 0; i < 3 * vntCount; i++) array->normals[i] = normals[i];
free (normals);
}
if (needTexcoords) {
array->texcoords = (GLfloat *)malloc(sizeof(GLfloat) * 2 * vntCount);
for (i = 0; i < 2 * vntCount; i++) array->texcoords[i] = texcoords[i];
free (texcoords);
}

// Clean up the members array.
for (i = 1; i <= model->numvertices; i++) {
node = members[i];
while (node) {
tail = node;
node = node->next;
free(tail);
}
}
free(members);

array->indices = indices;
array->indexCount = indexCount;

// If this group has a material set, stash a pointer to it.
if (group->material) array->material = &(model->materials[group->material]);

} // if group->numtriangles
//
group = group->next;
} // while group

EDEN_LOGe("glmCreateArray:: Number of group : %d\n",counter);


}

